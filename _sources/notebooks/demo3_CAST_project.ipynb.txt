{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Demo3 CAST Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import CAST\n",
    "import scanpy as sc\n",
    "import os\n",
    "import numpy as np\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "work_dir = '$demo_path' #### input the demo path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_path = f'{work_dir}/demo3_CAST_Projection/demo_output'\n",
    "os.makedirs(output_path,exist_ok=True)\n",
    "graph_list = {'rep1':['STAR_rep1','RIBO_rep1']} # source_sample, target_sample"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### CAST Project to project the STARmap data to the RIBOmap data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## This dataset contains 4 samples (STAR_rep1, RIBO_rep1, STAR_rep2, RIBO_rep2) and integrated features ('X_pca_harmony')\n",
    "sdata = sc.read_h5ad(f'{output_path}/../data/demo3.h5ad')\n",
    "sdata = CAST.preprocess_fast(sdata,mode = 'default')\n",
    "batch_key = 'sample'"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `CAST_PROJECT()` function is used to project the `source_sample` (query sample) to `target_sample` (reference sample).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sdata_refs = {}\n",
    "list_ts = {}\n",
    "color_dict = {\n",
    "        'TEPN': '#256b00',\n",
    "        'INH': '#ee750a',\n",
    "        'CHO_PEP': '#f280cf',\n",
    "        'DE_MEN': '#f24f4b',\n",
    "        'AC': '#e8e879',\n",
    "        'OLG': '#a8e1eb',\n",
    "        'VAS': '#395ba8',\n",
    "        'CHOR_EPEN': '#697491',\n",
    "        'PVM': '#8803fc',\n",
    "        'MLG': '#23ccb8',\n",
    "        'OPC': '#667872',\n",
    "        'Other': '#ebebeb'\n",
    "    }\n",
    "for rep in graph_list.keys():\n",
    "    print(f'Start the {rep} samples:')\n",
    "    source_sample, target_sample = graph_list[rep]\n",
    "    output_path_t = f'{output_path}/{source_sample}_to_{target_sample}'\n",
    "    os.makedirs(output_path_t,exist_ok=True)\n",
    "    sdata_refs[rep],list_ts[rep] = CAST.CAST_PROJECT(\n",
    "        sdata_inte = sdata[np.isin(sdata.obs[batch_key],[source_sample, target_sample])], # the integrated dataset\n",
    "        source_sample = source_sample, # the source sample name\n",
    "        target_sample = target_sample, # the target sample name\n",
    "        coords_source = np.array(sdata[np.isin(sdata.obs[batch_key],source_sample),:].obs.loc[:,['x','y']]), # the coordinates of the source sample\n",
    "        coords_target = np.array(sdata[np.isin(sdata.obs[batch_key],target_sample),:].obs.loc[:,['x','y']]), # the coordinates of the target sample\n",
    "        scaled_layer = 'log1p_norm_scaled', # the scaled layer name in `adata.layers`, which is used to be integrated\n",
    "        batch_key = batch_key, # the column name of the samples in `obs`\n",
    "        source_sample_ctype_col = 'cell_type', # the column name of the cell type in `obs`\n",
    "        output_path = output_path_t, # the output path\n",
    "        integration_strategy = None, # 'Harmony' or None (use existing integrated features)\n",
    "        color_dict = color_dict # the color dict for the cell type\n",
    "    )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
